
name: Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install Poetry
        run: pip install poetry

      - name: Install Python dependencies
        run: poetry install --no-root

      - name: Format
        run: poetry run black .

      - name: Lint
        run: poetry run pylint src tests

      - name: Coverage
        run: poetry run pytest --cov src tests/unit tests/integration

  # Deploy to dev on merge to master
  deploy-dev:
    name: deploy-dev
    if: github.ref == 'refs/heads/master'
    concurrency:
      group: ${{ github.workflow }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Use Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install Poetry
        run: pip install poetry

      - name: Install Python dependencies
        run: poetry install --no-root

      - name: Configure AWS Dev Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}

      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: '12.x'

      - name: install serverless
        run: npm install

      - name: deploy app
        run: npx serverless deploy --stage dev --resource-suffix ${{ secrets.DEPLOYMENT_SUFFIX_DEV }}

      - name: get deployment url
        run: echo BASE_URL=$(npx serverless info | grep -o 'https.*\/dev\/') >> "$GITHUB_ENV"

      - name: Test (sys)
        run: BASE_URL=${{ env.BASE_URL }} pytest tests/sys/

  # Deploy to prd on tag
  deploy-prd:
    name: deploy-prd
    if: startsWith(github.ref, 'refs/tags/v')
    concurrency:
      group: ${{ github.workflow }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Use Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Build project
        run: |
          echo ${{ github.repository }}
          zip -r qgis-plugin-repository.zip .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            See [CHANGELOG](https://github.com/linz/qgis-plugin-repository/blob/master/CHANGELOG.md) for detailed release information.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./qgis-plugin-repository.zip
          asset_name: qgis-plugin-repository
          asset_content_type: application/zip

      - name: Configure AWS Prd Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PRD }}

      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: '12.x'

      - name: install serverless
        run: npm install

      - name: deploy app
        run: npx serverless deploy --stage dev --resource-suffix ${{ secrets.DEPLOYMENT_SUFFIX_PRD }}
